/******************
Code by Vamoss
Original code link:
https://www.openprocessing.org/sketch/867184

Author links:
http://vamoss.com.br
http://twitter.com/vamoss
http://github.com/vamoss
******************/

//Inspired by Shannon Downey
//https://twitter.com/ShannonDowney/status/1242189972792315912

const USE_MOUSE_AROUND_CENTER = true;

const message1 = "DISTÂNCIA SOCIAL";
const message2 = "SOCIALIZAÇÃO À DISTÂNCIA";

const minMouseDist = 150;
const minDist = 10;

let size, radius, center, font, emojiSize, points, color1, color2, circularText1, circularText2;

let emojiArr = [[128102],[128102,127995],[128102,127996],[128102,127997],[128102,127998],[128102,127999],[128103],[128103,127995],[128103,127996],[128103,127997],[128103,127998],[128103,127999],[128104],[128104,127995],[128104,127996],[128104,127997],[128104,127998],[128104,127999],[128105],[128105,127995],[128105,127996],[128105,127997],[128105,127998],[128105,127999],[128113],[128113,127995],[128113,127996],[128113,127997],[128113,127998],[128113,127999],[128114],[128114,127995],[128114,127996],[128114,127997],[128114,127998],[128114,127999],[128115],[128115,127995],[128115,127996],[128115,127997],[128115,127998],[128115,127999],[128116],[128116,127995],[128116,127996],[128116,127997],[128116,127998],[128116,127999],[128117],[128117,127995],[128117,127996],[128117,127997],[128117,127998],[128117,127999],[128118],[128118,127995],[128118,127996],[128118,127997],[128118,127998],[128118,127999],[128120],[128120,127995],[128120,127996],[128120,127997],[128120,127998],[128120,127999],[129332],[129332,127995],[129332,127996],[129332,127997],[129332,127998],[129332,127999],[129489],[129489,127995],[129489,127996],[129489,127997],[129489,127998],[129489,127999],[129490],[129490,127995],[129490,127996],[129490,127997],[129490,127998],[129490,127999],[129491],[129491,127995],[129491,127996],[129491,127997],[129491,127998],[129491,127999],[129492],[129492,127995],[129492,127996],[129492,127997],[129492,127998],[129492,127999],[129493],[129493,127995],[129493,127996],[129493,127997],[129493,127998],[129493,127999],[128104,127995,8205,9877,65039],[128104,127996,8205,9877,65039],[128104,127997,8205,9877,65039],[128104,127998,8205,9877,65039],[128104,127999,8205,9877,65039],[128104,127995,8205,9878,65039],[128104,127996,8205,9878,65039],[128104,127997,8205,9878,65039],[128104,127998,8205,9878,65039],[128104,127999,8205,9878,65039],[128104,127995,8205,127806],[128104,127996,8205,127806],[128104,127997,8205,127806],[128104,127998,8205,127806],[128104,127999,8205,127806],[128104,127995,8205,127891],[128104,127996,8205,127891],[128104,127997,8205,127891],[128104,127998,8205,127891],[128104,127999,8205,127891],[128104,127995,8205,127859],[128104,127996,8205,127859],[128104,127997,8205,127859],[128104,127998,8205,127859],[128104,127999,8205,127859],[128104,127995,8205,127979],[128104,127996,8205,127979],[128104,127997,8205,127979],[128104,127998,8205,127979],[128104,127999,8205,127979],[128104,127995,8205,128295],[128104,127996,8205,128295],[128104,127997,8205,128295],[128104,127998,8205,128295],[128104,127999,8205,128295],[128104,127995,8205,127981],[128104,127996,8205,127981],[128104,127997,8205,127981],[128104,127998,8205,127981],[128104,127999,8205,127981],[128104,127995,8205,128188],[128104,127996,8205,128188],[128104,127997,8205,128188],[128104,127998,8205,128188],[128104,127999,8205,128188],[128104,127995,8205,128300],[128104,127996,8205,128300],[128104,127997,8205,128300],[128104,127998,8205,128300],[128104,127999,8205,128300],[128104,127995,8205,128187],[128104,127996,8205,128187],[128104,127997,8205,128187],[128104,127998,8205,128187],[128104,127999,8205,128187],[128104,127995,8205,127908],[128104,127996,8205,127908],[128104,127997,8205,127908],[128104,127998,8205,127908],[128104,127999,8205,127908],[128104,127995,8205,127912],[128104,127996,8205,127912],[128104,127997,8205,127912],[128104,127998,8205,127912],[128104,127999,8205,127912],[128104,127995,8205,9992,65039],[128104,127996,8205,9992,65039],[128104,127997,8205,9992,65039],[128104,127998,8205,9992,65039],[128104,127999,8205,9992,65039],[128104,127995,8205,128640],[128104,127996,8205,128640],[128104,127997,8205,128640],[128104,127998,8205,128640],[128104,127999,8205,128640],[128104,127995,8205,128658],[128104,127996,8205,128658],[128104,127997,8205,128658],[128104,127998,8205,128658],[128104,127999,8205,128658],[128105,127995,8205,9877,65039],[128105,127996,8205,9877,65039],[128105,127997,8205,9877,65039],[128105,127998,8205,9877,65039],[128105,127999,8205,9877,65039],[128105,127995,8205,9878,65039],[128105,127996,8205,9878,65039],[128105,127997,8205,9878,65039],[128105,127998,8205,9878,65039],[128105,127999,8205,9878,65039],[128105,127995,8205,127806],[128105,127996,8205,127806],[128105,127997,8205,127806],[128105,127998,8205,127806],[128105,127999,8205,127806],[128105,127995,8205,127891],[128105,127996,8205,127891],[128105,127997,8205,127891],[128105,127998,8205,127891],[128105,127999,8205,127891],[128105,127995,8205,127859],[128105,127996,8205,127859],[128105,127997,8205,127859],[128105,127998,8205,127859],[128105,127999,8205,127859],[128105,127995,8205,127979],[128105,127996,8205,127979],[128105,127997,8205,127979],[128105,127998,8205,127979],[128105,127999,8205,127979],[128105,127995,8205,128295],[128105,127996,8205,128295],[128105,127997,8205,128295],[128105,127998,8205,128295],[128105,127999,8205,128295],[128105,127995,8205,127981],[128105,127996,8205,127981],[128105,127997,8205,127981],[128105,127998,8205,127981],[128105,127999,8205,127981],[128105,127995,8205,128188],[128105,127996,8205,128188],[128105,127997,8205,128188],[128105,127998,8205,128188],[128105,127999,8205,128188],[128105,127995,8205,128300],[128105,127996,8205,128300],[128105,127997,8205,128300],[128105,127998,8205,128300],[128105,127999,8205,128300],[128105,127995,8205,128187],[128105,127996,8205,128187],[128105,127997,8205,128187],[128105,127998,8205,128187],[128105,127999,8205,128187],[128105,127995,8205,127908],[128105,127996,8205,127908],[128105,127997,8205,127908],[128105,127998,8205,127908],[128105,127999,8205,127908],[128105,127995,8205,127912],[128105,127996,8205,127912],[128105,127997,8205,127912],[128105,127998,8205,127912],[128105,127999,8205,127912],[128105,127995,8205,9992,65039],[128105,127996,8205,9992,65039],[128105,127997,8205,9992,65039],[128105,127998,8205,9992,65039],[128105,127999,8205,9992,65039],[128105,127995,8205,128640],[128105,127996,8205,128640],[128105,127997,8205,128640],[128105,127998,8205,128640],[128105,127999,8205,128640],[128105,127995,8205,128658],[128105,127996,8205,128658],[128105,127997,8205,128658],[128105,127998,8205,128658],[128105,127999,8205,128658],[128110,127995],[128110,127995,8205,9792,65039],[128110,127996],[128110,127996,8205,9792,65039],[128110,127997],[128110,127997,8205,9792,65039],[128110,127998],[128110,127998,8205,9792,65039],[128110,127999],[128110,127999,8205,9792,65039],[128373,127995],[128373,127995,8205,9792,65039],[128373,127996],[128373,127996,8205,9792,65039],[128373,127997],[128373,127997,8205,9792,65039],[128373,127998],[128373,127998,8205,9792,65039],[128373,127999],[128373,127999,8205,9792,65039],[128130,127995],[128130,127995,8205,9792,65039],[128130,127996],[128130,127996,8205,9792,65039],[128130,127997],[128130,127997,8205,9792,65039],[128130,127998],[128130,127998,8205,9792,65039],[128130,127999],[128130,127999,8205,9792,65039],[128119,127995],[128119,127995,8205,9792,65039],[128119,127996],[128119,127996,8205,9792,65039],[128119,127997],[128119,127997,8205,9792,65039],[128119,127998],[128119,127998,8205,9792,65039],[128119,127999],[128119,127999,8205,9792,65039],[129337,127995],[129337,127995,8205,9792,65039],[129337,127996],[129337,127996,8205,9792,65039],[129337,127997],[129337,127997,8205,9792,65039],[129337,127998],[129337,127998,8205,9792,65039],[129337,127999],[129337,127999,8205,9792,65039],[129333],[129333,127995],[129333,127996],[129333,127997],[129333,127998],[129333,127999],[128112],[128112,127995],[128112,127996],[128112,127997],[128112,127998],[128112,127999]];

function preload() {
  font = loadFont('ArchivoBlack-Regular.ttf');
}

function setup() {
	size = min(windowWidth, windowHeight) * 0.8;
	createCanvas(windowWidth, windowHeight);
	
	center = createVector(width/2, height/1.4);
	radius = size/2.5;
	
	color1 = color("#581845");
	color2 = color("#FFC30F");
	
	circularText1 = createCirclarText(color1);
	circularText2 = createCirclarText(color2);
	
	init();
}

function init(){
	points = [];
	let total = size/20;
	emojiSize = size/10;
	for(let i = 0; i < total; i++){
		let v = createVector(random(width), random(height));
		let emojiChars = emojiArr[floor(random(emojiArr.length))];
		let emoji = String.fromCodePoint.apply(this, emojiChars);
		points.push({
			dest: v,
			pos: v.copy(),
			size: emojiSize * 0.8,
			emoji: emoji
		});
	}
}

function draw() {
	//mouse rotation percentage
	let angle = atan2(mouseY - center.y, mouseX - center.x)+PI;
	let pct = USE_MOUSE_AROUND_CENTER ? (angle) / TWO_PI : constrain(mouseX / width, 0, 1);
	let mode = round(pct);//0 OR 1
	
	background(mode ? color1 : color2);
	
	//draw text
	push();
		translate(center.x, center.y);
		if(USE_MOUSE_AROUND_CENTER)
			rotate((pct - 0.25) * TWO_PI);
		else
			rotate(pct * PI);
		translate(-center.x, -center.y);
		image(mode ? circularText2 : circularText1, center.x - size/2, center.y - size/2);
	pop();
	
	//cut text effect
	let diff = USE_MOUSE_AROUND_CENTER ? map(cos(angle+PI/2), -1, 1, -size/6, size/6) : map(pct, 0, 1, -size/6, size/6);
	fill(mode ? color1 : color2);
	rect(0, center.y+diff, width, center.y-diff);
	
	//update
	let mouse = createVector(mouseX, mouseY);
	for(let i = 0; i < points.length; i++){
		let d1 = points[i].dest;
		let s1 = points[i].size;
		
		//distance from mouse
		if(d1.dist(mouse) < minMouseDist){
			let a = atan2(d1.y - mouse.y, d1.x - mouse.x);
			d1.x = mouse.x + cos(a) * minMouseDist;
			d1.y = mouse.y + sin(a) * minMouseDist;
		}
		
		//distance from others
		for(let j = 0; j < points.length; j++){
			if(i == j) continue;
			let d2 = points[j].dest;
			let r = (s1 + points[j].size) * 0.5;
			if(d1.dist(d2) < minDist + r){
				let a = atan2(d2.y - d1.y, d2.x - d1.x);
				d2.x = d1.x + cos(a) * (minDist + r + 2);
				d2.y = d1.y + sin(a) * (minDist + r + 2);
			}
		}
		
		//circular constrain
		let maxRadius = radius * 0.9;
		if(d1.dist(center) > maxRadius){
			let a = atan2(d1.y - center.y, d1.x - center.x);
			d1.x = center.x + cos(a) * (maxRadius - s1);
			d1.y = center.y + sin(a) * (maxRadius - s1);
		}
		
		//smooth
		points[i].pos.x += (d1.x - points[i].pos.x) * 0.09;
		points[i].pos.y += (d1.y - points[i].pos.y) * 0.09;
	}
	
	if(mode){
		//draw connections
		stroke(color2);
		strokeWeight(size/200);
		for(let i = 0; i < points.length; i++){
			for(let j = i+1; j < points.length; j++){
				let d = points[i].pos.dist(points[j].pos);
				if(d < minDist * 8){
					line(points[i].pos.x, points[i].pos.y,
							 points[j].pos.x, points[j].pos.y);
				}
			}
		}
	}

	//draw emoji
	fill(255);
	noStroke();
	textSize(emojiSize/2);
	textAlign(CENTER, CENTER);
	for(let i = 0; i < points.length; i++){
		text(points[i].emoji, points[i].pos.x, points[i].pos.y);
	}
}

function createCirclarText(col) {
	let graphics = createGraphics(size, size);
	graphics.fill(col);
	graphics.noStroke();
	graphics.textFont(font);
	graphics.textSize(size/12);
	graphics.textAlign(LEFT, BASELINE);
	drawArcMessage(message1, 0, graphics);
	drawArcMessage(message2, PI, graphics);
	return graphics;
}

function drawArcMessage(message, startAngle, graphics){
	let a = -graphics.textWidth(message)/2/radius + startAngle;
	for(let i = 0; i < message.length; i++){
		let c = message.charAt(i);
		let t = graphics.textWidth(c)/2;
		let x = cos(a-HALF_PI) * radius + graphics.width/2;
		let y = sin(a-HALF_PI) * radius + graphics.height/2;
		a += t/radius;
		graphics.push();
			graphics.translate(x, y);
			graphics.rotate(a);
			graphics.text(c, 0, 0);
		graphics.pop();
		a += t/radius;
	}
}

function mousePressed(){
	init();
}